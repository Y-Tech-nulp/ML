const TgBot = require('node-telegram-bot-api'),
      token = "1180139988:AAHqK0UqszqI04eibuMAyXU_qXuHnTmTI0w",
      bot = new TgBot(token, {polling: true});

const Promise = require('bluebird');

Promise.config({
  cancellation: true
});

var add_user = [];

//delete after release
var test_mode_users = [];
var temp_lamp = "off";

bot.onText(/\/–ø–æ–≤—Ç–æ—Ä–∏ (.+)/, function (msg, match) {
    bot.sendMessage(msg.from.id, match[1]);
    return;
});

//–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—á–∞—Ç–æ–∫
bot.onText(/\/start/, function (msg, match) {
    if(add_user.indexOf(msg.from.id) > -1) {
        bot.sendMessage(msg.from.id, 
                "–ï–µ–µ –Ω—ñ. –¶–µ –Ω–µ –∫–æ–¥ –ª–∞–º–ø–∏."
                +"\n\n–Ø–∫—â–æ —Ç–∏ –ø–µ—Ä–µ–¥—É–º–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –ª–∞–º–ø—É - –Ω–∞–ø–∏—à–∏ ¬´cancel¬ª");
        return;
    }
    bot.sendMessage(msg.from.id, 
                    "–ü—Ä–∏–≤—ñ—Ç, —è - –±–æ—Ç –≤—ñ–¥ Y-Tech.\n"
                    +"–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ —Ç–≤–æ—î—é –ª–∞–º–ø–æ—é, –ø–æ—ó—Ö–∞–ª–∏?", {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            inline_keyboard: [
                [{text: "–í–ø–µ—Ä–µ–¥!", callback_data: 'go'}],
            ]
        })
    });
    return;
});

bot.onText(/\/menu/, function (msg, match) {
    if(getAuth(msg.from.id) == false) return;
    bot.sendMessage(msg.from.id, "–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –í–∞—à–æ—é –ª–∞–º–ø–æ—é\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥—ñ—é",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä", callback_data: 'set_color'},{text: "–ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", callback_data: 'set_brightness'}],
                        (temp_lamp == 'off' ? ([{text: "–í–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_on'}]):([{text: "–í–≤–∏–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_off'}]) ) 
                    ]
                })
            }) 
});

bot.on('message', function (msg) {
    if(add_user.indexOf(msg.from.id) > -1) {
        if(msg.text.length != 6 || msg.text.indexOf('/') > -1) {
            bot.sendMessage(msg.from.id, 
                            "–ï–µ–µ –Ω—ñ. –¶–µ –Ω–µ –∫–æ–¥ –ª–∞–º–ø–∏."
                           +"\n\n–Ø–∫—â–æ —Ç–∏ –ø–µ—Ä–µ–¥—É–º–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –ª–∞–º–ø—É - –Ω–∞–ø–∏—à–∏ ¬´cancel¬ª");
            return;
        }
        if(msg.text.toLowerCase() == 'cancel') {
            bot.sendMessage(msg.from.id, 
                            "–ë–µ–∑ –ª–∞–º–ø–∏ —Ç–∏ –Ω–µ –∑–º–æ–∂–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º üòû");
            for(i in add_user){
                if(add_user[i] == msg.from.id) {
                    add_user.splice(i, 1)
                }
            }
        }
        return;
    }
    if(msg.text.indexOf('/') == -1){
        bot.sendPhoto(msg.chat.id, __dirname+'/kavo.png', { caption: '–ö–∞–≤–æ?' });
        return;
    }
    return;
});

bot.on('callback_query', async function (msg) {
   console.log(msg.data);
    switch(msg.data) {
        case 'go': {
            bot.sendMessage(msg.from.id, 
                            "–û–∫–µ–π! –î–∞–≤–∞–π –¥–æ–¥–∞–º–æ —Ç–≤–æ—é –ª–∞–º–ø—É!\n", {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–î–æ–¥–∞—Ç–∏ –ª–∞–º–ø—É", callback_data: 'add'}],
                        [{text: "skip (for dev)", callback_data: 'skip'}],
                    ]
                })
            });
            break;
        };
        case 'add': {
            bot.sendMessage(msg.from.id,
                           "–í–≤–µ–¥–∏ –∫–æ–¥ –ª–∞–º–ø–∏, —è–∫–∏–π –≤–∫–∞–∑–∞–Ω–∏–π –≤ —Ç–≤–æ—î–º—É –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ"
                            + "\n\n–Ø–∫—â–æ —Ç–∏ –ø–µ—Ä–µ–¥—É–º–∞–≤ - –Ω–∞–ø–∏—à–∏ ¬´cancel¬ª"
                           );
            add_user.push(msg.from.id);
            break;
        };
        case 'skip': {
             bot.sendMessage(msg.from.id,
                           "–í–∏ –≤–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞."
                            + "\n–í—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–æ —Ä–µ–ª—ñ–∑—É –ª–∞–º–ø–∏."
                           );
             test_mode_users.push(msg.from.id);
            break;
        };
        case 'lamp_on': {
            if(getAuth(msg.from.id) == false) return;
            temp_lamp = "on";
            bot.sendMessage(msg.from.id, "–õ–∞–º–ø–∞ –≤–≤—ñ–º–∫–Ω–µ–Ω–∞.\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥—ñ—é",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä", callback_data: 'set_color'},{text: "–ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", callback_data: 'set_brightness'}],
                        (temp_lamp == 'off' ? ([{text: "–í–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_on'}]):([{text: "–í–≤–∏–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_off'}]) ) 
                    ]
                })
            }) 
            break;
        };
        case 'lamp_off': {
            if(getAuth(msg.from.id) == false) return;
            temp_lamp = "off";
            bot.sendMessage(msg.from.id, "–õ–∞–º–ø–∞ –≤–∏–º–∫–Ω–µ–Ω–∞.\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥—ñ—é",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä", callback_data: 'set_color'},{text: "–ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", callback_data: 'set_brightness'}],
                        (temp_lamp == 'off' ? ([{text: "–í–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_on'}]):([{text: "–í–≤–∏–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_off'}]) ) 
                    ]
                })
            }) 
            break;
        };
        case 'menu': {
            if(getAuth(msg.from.id) == false) return;
            bot.sendMessage(msg.from.id, "–ú–µ–Ω—é\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥—ñ—é",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä", callback_data: 'set_color'},{text: "–ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", callback_data: 'set_brightness'}],
                        (temp_lamp == 'off' ? ([{text: "–í–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_on'}]):([{text: "–í–≤–∏–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_off'}]) ) 
                    ]
                })
            }) 
            break;
        };
        case 'set_color': {
            if(getAuth(msg.from.id) == false) return;
            bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ë—ñ–ª–∏–π", callback_data: 'set_color_white'},{text: "–ß–µ—Ä–≤–æ–Ω–∏–π", callback_data: 'set_color_red'},{text: "–ó–µ–ª–µ–Ω–∏–π", callback_data: 'set_color_green'}],
                        [{text: "–ñ–æ–≤—Ç–∏–π", callback_data: 'set_color_yellow'},{text: "–°–∏–Ω—ñ–π", callback_data: 'set_color_blue'},{text: "–û—Ä–∞–Ω–∂–µ–≤–∏–π", callback_data: 'set_color_orange'}],
                        [{text: "–ï—Ñ–µ–∫—Ç ¬´Fade¬ª", callback_data: 'set_color_fade'},{text: "–ï—Ñ–µ–∫—Ç ¬´Gradient¬ª", callback_data: 'set_color_blue'}],
                        [{text: "–ú–µ–Ω—é", callback_data: 'menu'}]
                    ]
                })
            }) 
            break;
        };
        case 'set_brightness': {
            bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ë—ñ–ª–∏–π", callback_data: 'set_color_white'},{text: "–ß–µ—Ä–≤–æ–Ω–∏–π", callback_data: 'set_color_red'},{text: "–ó–µ–ª–µ–Ω–∏–π", callback_data: 'set_color_green'}],
                        [{text: "–ñ–æ–≤—Ç–∏–π", callback_data: 'set_color_yellow'},{text: "–°–∏–Ω—ñ–π", callback_data: 'set_color_blue'},{text: "–û—Ä–∞–Ω–∂–µ–≤–∏–π", callback_data: 'set_color_orange'}],
                        [{text: "–ï—Ñ–µ–∫—Ç ¬´Fade¬ª", callback_data: 'set_color_fade'},{text: "–ï—Ñ–µ–∫—Ç ¬´Gradient¬ª", callback_data: 'set_color_blue'}],
                        [{text: "–ú–µ–Ω—é", callback_data: 'menu'}]
                    ]
                })
            }) 
            break;
        };
        default: {
            bot.sendMessage(msg.from.id, "–í —Ä–æ–∑—Ä–æ–±—Ü—ñ.");
            break;
        }
    }
    return;
});

var getAuth = (user) => {
    let status = true;
    if(test_mode_users.indexOf(user) == -1) {
        bot.sendMessage(user, "–í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –ª–∞–º–ø—É!\n–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫—É ¬´–¥–æ–¥–∞—Ç–∏ –ª–∞–º–ø—É¬ª, —â–æ–± –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–î–æ–¥–∞—Ç–∏ –ª–∞–º–ø—É", callback_data: 'add'}]
                    ]
                })
            });
        status = false;
    }
    return status;
}